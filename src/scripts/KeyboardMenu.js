import KeyPressListener from "./KeyPressListener";

class KeyboardMenu {
    constructor(config={}) {
        this.options = []; //set by updater method
        this.upBind = null;
        this.downBind = null;
        this.prevFocus = null; // the last button that was focused, useful for going up and down menus
        this.descriptionContainer = config.descriptionContainer || null; // this is to specify which element to append the description too, default is the container passed in this.init()
    }

    focusButton(targetIndex) {
        if (targetIndex === undefined || Object.is(targetIndex , NaN)) { // if no index was given, then don't do anything, done when you try to go down when already on the buttom choice
            return;
        }

        const optionButtons = Array.from(this.element.querySelectorAll(".menu-button"))
        
        if (optionButtons[targetIndex].classList.contains("disabled")) {// if the specified button was disabled, don't do anything
            return
        }

        optionButtons.forEach(button => { // go over each button, and remove the focus class, except for the target button, add the focus class
            if (Number(button.dataset.button) === targetIndex) {
                console.log(Number(button.dataset.button))
                button.classList.add("focus")
                this.prevFocus = button;
                this.descriptionElementText.innerText = button.dataset.description;
            } else {
                button.classList.remove("focus")
            }
        })
        
    }

    async setOptions(options) {
        this.options = await options;
        this.element.innerHTML = this.options.map((option, index) => {
            const disabledAttr = option.disabled ? "disabled" : ""; 

            // As a workaround for the buttons instantly getting clicked if you had the enter key held down after the setup was complete, which would happen if you were using the enter key to progress the text messages
            return(`
                <div class="option"> 
                    <span class="menu-button ${disabledAttr}"  data-button="${index}" data-description="${option.description}">
                        ${option.label}
                    </span>
                    <span class= "right">${option.right ? option.right() : ""}</span>
                </div>
            `)
        }).join("") // this is definitely one way of joining the html string generated by each option

        const optionButtons = Array.from(this.element.querySelectorAll(".menu-button"))

        optionButtons.forEach((button, index) => {

            button.addEventListener("click", () => { // be default pressing Enter when a button is focused is the same as a click, so no need ot make a Enter key bind
                if (button.classList.contains("disabled")) {// if the button is disabled we stop the function, 
                    return
                }
                
                const chosenOption = this.options[ Number(button.dataset.button) ];
                // console.log("CLICKED");
                // console.log(chosenOption);
                chosenOption.handler();
            })
            button.addEventListener("mouseenter", () => {
                this.focusButton(index);
            })
        })
        
        //autoFocus the first non-disabled attribute
        for (let i = 0; i < optionButtons.length; i++) {
            if (!optionButtons[i].disabled) {
                this.focusButton(i);
                break;
            }

        }
        console.log("set up options")
    }

    createElement() {
        this.element = document.createElement("div");
        this.element.classList.add("KeyboardMenu");

        //Description box element
        this.descriptionElement = document.createElement("div");
        this.descriptionElement.classList.add("DescriptionBox");
        this.descriptionElement.innerHTML = ('<p>INSERT INFORMATION HERE</p>');
        //since we are going to be updating the description text a lot we will make a reference to it
        this.descriptionElementText = this.descriptionElement.querySelector("p");
    }

    end() {
        //Remove the menu element and description element
        this.element.remove();
        this.descriptionElement.remove();

        //Clean up bindings
        this.upBind.unbind();
        this.downBind.unbind();
        this.enterBind.unbind();
    }
    
    init(container) {
        this.createElement();
        (this.descriptionContainer?.parent || container).appendChild(this.descriptionElement);
        container.appendChild(this.element);

        this.upBind = new KeyPressListener("ArrowUp", () => {
            const currentButtonIndex = Number(this.prevFocus.getAttribute("data-button"));
            
            // we use a find function to find the first button with the following conditions (it's index is greater than the current button AND it's not disabled)
            const nextButton = Array.from(this.element.querySelectorAll(".menu-button[data-button]")).reverse().find(el => {
                return el.dataset.button < currentButtonIndex && !el.classList.contains("disabled");
            })

            this.focusButton(Number(nextButton?.dataset.button)); //if there is no button then we are at the bottom of the valid buttons, so don't do anything
        })
        this.downBind = new KeyPressListener("ArrowDown", () => {
            const currentButtonIndex = Number(this.prevFocus.getAttribute("data-button"));

            // we use a find function to find the first button with the following conditions (it's index is greater than the current button AND it's not disabled)
            const nextButton = Array.from(this.element.querySelectorAll(".menu-button[data-button]")).find(el => {
                return el.dataset.button > currentButtonIndex && !el.classList.contains("disabled");
            })
            // types really bit me in the ass here
            this.focusButton(Number(nextButton?.dataset.button)); //if there is no button then we are at the bottom of the valid buttons, so don't do anything
        })
        this.enterBind = new KeyPressListener("Enter", () => {
            console.log("CLICK with enter");
            
            if (this.prevFocus.classList.contains("disabled")) {// if the button is disabled we stop the function, in this case, we shouldn't be able to "click" a disabled button with the Enter key, 
                console.warn()
                return
            }
            
            const chosenOption = this.options[ Number(this.prevFocus.dataset.button) ];
            chosenOption.handler();
        })
    }
}

export default KeyboardMenu